{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","bid","contractBalance","highestBid","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","call","highestBidder","getContractBalance","setState","alert","error","send","from","value","input","withdraw","response","myChangeHandler","event","target","this","contractBalanceInfo","userBalances","onClick","className","type","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62b0219c.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    web3: null, \n    accounts: null, \n    contract: null,\n    bid: 0,\n    contractBalance: 0,\n    highestBid: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const highestBid = await instance.methods.highestBid().call();\n      const highestBidder = await instance.methods.highestBidder().call();\n      const contractBalance = await instance.methods.getContractBalance().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, highestBid: highestBid, highestBidder: highestBidder, contractBalance: contractBalance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n\n  bid = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.bid().send({ from: accounts[0], value: this.state.input});\n  };\n\n  withdraw = async () => {\n    const { accounts, contract} = this.state;\n    await contract.methods.withdraw().send({from: accounts[0]});\n\n    const response = await contract.methods.highestBidder().call();\n    this.setState({highestBidder: response }, () => { console.log(this.state.highestBidder) });\n  };\n\n  highestBid = async () => {\n    const {contract} = this.state;\n    const response = await contract.methods.highestBid().call();\n    this.setState({highestBid: response }, () => { console.log(this.state.highestBid) });\n  }\n  \n  contractBalance = async () => {\n    const {contract} = this.state;\n    const response = await contract.methods.getContractBalance().call();\n    this.setState({contractBalance: response }, () => { console.log(this.state.contractBalance) });\n  }\n\n  highestBidder = async () => {\n    const {contract} = this.state;\n    const response = await contract.methods.highestBidder().call();\n    this.setState({highestBidder: response }, () => { console.log(this.state.highestBidder) });\n  }\n  \n  myChangeHandler = (event) => {\n    this.setState({ input: event.target.value }, () => {\n      console.log(this.state.input)\n    });\n  }\n\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    let contractBalanceInfo\n    if (this.state.contractBalance == 0) {\n      contractBalanceInfo = \"\";\n    }\n    else {\n      contractBalanceInfo = <div>{this.state.contractBalance}</div>\n    }\n\n    let highestBid\n    if (this.state.highestBid == 0) {\n      highestBid = \"\";\n    }\n    else {\n      highestBid = <div>{this.state.highestBid}</div>    \n    }\n\n    let highestBidder\n    if (this.state.highestBidder == this.state.accounts[0]) {\n      highestBidder = <div>You\n      </div>\n    }\n    else {\n      highestBidder = <div>{this.state.highestBidder}\n      </div>\n    }\n\n    let bid\n    if (this.state.input <= this.state.highestBid) {\n      bid = <div>You have to bid higher!</div>\n    }\n \n    let withdraw\n    if (this.state.highestBidder != this.state.accounts[0] && this.state.userBalances != 0) {\n      withdraw =<p><h3>Withdraw</h3>\n      <button onClick={this.withdraw}>Withdraw</button></p>\n    }\n \n\n\n\n    return (\n      <div className=\"App\">\n        <h1>Auction</h1>\n       \n        <h3>Contract Balance: {contractBalanceInfo}</h3>\n        <button onClick={this.contractBalance}>Refresh</button>\n              \n\n        <h3>Highest Bid: {highestBid}</h3> \n        <button onClick={this.highestBid}>Refresh</button>\n\n        <h3>Highest Bidder: {highestBidder}</h3>\n        <button onClick={this.highestBidder}>Refresh</button>\n\n        <h3>Bid</h3>\n        <input type=\"text\" onChange={this.myChangeHandler} />\n        <button onClick={this.bid}>Bid</button>\n        {bid}  \n        \n\n        {withdraw}\n      \n\n      </div>      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}